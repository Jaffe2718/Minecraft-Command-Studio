plugins {
    id 'fabric-loom' version '1.0-SNAPSHOT'
    id 'maven-publish'
    id 'org.openjfx.javafxplugin' version '0.0.13'
}

version = project.mod_version
group = project.maven_group

repositories {
    // Add repositories to retrieve artifacts from in here.
    // You should only use this when depending on other mods because
    // Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
    // See https://docs.gradle.org/current/userguide/declaring_repositories.html
    // for more information about repositories.
    mavenCentral()
    maven { url "https://api.modrinth.com/maven" }
    maven { url "https://maven.terraformersmc.com/releases"}
    maven { url "https://mvnrepository.com/artifact/"}
}

dependencies {
    // To change the versions see the gradle.properties file
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

        // Fabric API. This is technically optional, but you probably want it anyway.
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
    // other mods
    modApi("com.terraformersmc:modmenu:${modmenu_version}") { exclude(module: "fabric-api") }
    modImplementation "maven.modrinth:midnightlib:${midnightlib_version}"


    // other dependencies
    implementation "org.openjfx:javafx-base:${project.javafx_version}"
    implementation "org.openjfx:javafx-controls:${project.javafx_version}"
    implementation "org.openjfx:javafx-fxml:${project.javafx_version}"
    implementation "org.openjfx:javafx-graphics:${project.javafx_version}"
    implementation "org.fxmisc.richtext:richtextfx:${project.richtextfx_version}"
    // openai
    implementation "com.theokanning.openai-gpt3-java:api:${project.openai_version}"
    }

processResources {
    inputs.property "version", project.version
    inputs.property "minecraft_version", project.minecraft_version
    inputs.property "loader_version", project.loader_version
    filteringCharset "UTF-8"

    filesMatching("fabric.mod.json") {
        expand "version": project.version,
                "minecraft_version": project.minecraft_version,
                "loader_version": project.loader_version
    }
}

def targetJavaVersion = 17
tasks.withType(JavaCompile).configureEach {
    // ensure that the encoding is set to UTF-8, no matter what the system default is
    // this fixes some edge cases with special characters not displaying correctly
    // see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
    // If Javadoc is generated, this must be specified in that task too.
    it.options.encoding = "UTF-8"
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        it.options.release = targetJavaVersion
    }
}

java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
    archivesBaseName = project.archives_base_name
    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
    // if it is present.
    // If you remove this line, sources will not be generated.
    withSourcesJar()
}

javafx {
    version = project.javafx_version
    modules = ['javafx.controls', 'javafx.fxml', 'javafx.web']
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archives_base_name}"}
    }
    from {
        duplicatesStrategy = DuplicatesStrategy.EXCLUDE
        exclude "META-INF/*.SF", "META-INF/*.DSA", "META-INF/*.RSA"
        exclude("META-INF/substrate/config/reflectionconfig.json")
        configurations.compileClasspath.findAll() {
            it.name.contains("javafx") && it.name.endsWith(".jar")
        }.collect {
            zipTree(it)
        }
    }
    from {
        configurations.compileClasspath.findAll() {
            it.name.contains("flowless") && it.name.endsWith(".jar")
        }.collect {
            zipTree(it)
        }
    }
    from {
        configurations.compileClasspath.findAll() {
            it.name.contains("richtextfx") && it.name.endsWith(".jar")
        }.collect {
            zipTree(it)
        }
    }
    from {
        configurations.compileClasspath.findAll() {
            it.name.contains("undo") && it.name.endsWith(".jar")
        }.collect {
            zipTree(it)
        }
    }
    from {
        configurations.compileClasspath.findAll() {
            it.name.contains("wellbehaved") && it.name.endsWith(".jar")
        }.collect {
            zipTree(it)
        }
    }
    from {
        configurations.compileClasspath.findAll() {
            it.name.contains("reactfx") && it.name.endsWith(".jar")
        }.collect {
            zipTree(it)
        }
    }
}

// configure the maven publication
publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
        // Notice: This block does NOT have the same function as the block in the top level.
        // The repositories here will be used for publishing your artifact, not for
        // retrieving dependencies.
    }
}
